pipeline {
     agent { label 'slave' }
     environment {
        TAG_VERSION = '4.0.0'
        REGISTRY_PATH = '339712912577.dkr.ecr.ap-south-1.amazonaws.com'
        ECR_REPO_FULL_NAME = '339712912577.dkr.ecr.ap-south-1.amazonaws.com/newrepo'
        WAR_FULL_PATH = '/home/ec2-user/workspace/newpr/target/project-app.war'
        TMP_IMAGE_NAME = 'project-app'
        ECR_REPO_NAME = 'newrepo'
        REGION = 'ap-south-1'
    }
    stages {
        stage("Maven Build") {
            steps {
                sh '''
                 echo "mvn clean install"
               '''
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv() {
                    sh "${mvn}/bin/mvn clean verify sonar:sonar -Dsonar.projectKey=myproject -Dsonar.projectName='myproject'"
                }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Docker Build') {
            steps {
                sh '''
                cp ${WAR_FULL_PATH} .
                docker build -t ${TMP_IMAGE_NAME}:${TAG_VERSION} .
                '''
            }
        }
        stage('Docker Tag and Push to ECR') {
            steps {
                sh '''
                aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${REGISTRY_PATH}
                export IMAGE_ID=$(sudo docker images --filter=reference=${TMP_IMAGE_NAME} --format "{{.ID}}")
                echo $IMAGE_ID
                docker tag ${IMAGE_ID} ${REGISTRY_PATH}/${ECR_REPO_NAME}:${TAG_VERSION}
                docker push ${ECR_REPO_FULL_NAME}:${TAG_VERSION}
                '''
            }
        }
        stage('Helm Deploy') {
            steps {
                sh '''
                cd helm-charts
                sed -i "s/replace_image_tag/${TAG_VERSION}/g" values.yaml
                helm upgrade --install project-app .
                kubectl get svc
                '''
            }
        }
    }
}
